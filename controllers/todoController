const Todo = require('../models/todo')

/*
200 - good response
    200 - ok
    201 - created
    204 - no content
300 - redirection
    301 - redirect
    302 - redirect
400 - bad response but user's fault (server correctly performed, a different issue is occurring)
    400 - bad request.
    401 - unauthorized
    403 - forbidden
    404 - not found
500 - bad response but server's fault. Failed route, broken code
*/


exports.index = async function index (req, res) {
    // grab all todos
    try {
        const todos = await Todo.find({})
        res.status(200).json(todos)
    } catch (error) {
        res.status(400).json({ msg: error.message })
    }
}

exports.create = async function create (req, res) {
    // make a todo
    try {
        const todo = await Todo.create(req.body)
        res.status(201).json(todo)
    } catch (error) {
        res.status(400).json({ msg: error.message })
    }
}

exports.update = async function update (req, res) {
    // update a todo that exists
    /*

    in the db {
        title: 'Do my assignments'
    }

    req.body {
        title: 'Do my homework'
{ new: true } determines to send the MODIFIED document on an update request, rather than the original.
    }
    */
    try {
        const updatedTodo = await await Todo.findOneAndUpdate({ _id: req.params.id }, req.body, { new: true })
        res.status(200).json(updatedTodo)
    } catch (error) {
        res.status(400).json({ msg: error.message })
    }
}

exports.destroy = async function destroy (req, res) {
    // delete an existing todo
    try {
        const deletedTodo = await findOneAndDelete({ _id: req.params.id })
        send.status(204)
        // alternative to above: res.status(200).json({ msg: `The todo with the id of ${deletedTodo._id} was deleted from the MongoDB database; no further action necessary.` }) the 204 will ignore any error message you intend to sent. the message is content, making 204 incorrect.

    } catch (error) {
        res.status(400).json({ msg: error.message })
    }
}

exports.show = async function show (req, res) {
    // show 1 individual todo.
    try {
        const foundTodo = await Todo.findOne({ _id: req.params.id })
        res.status(200).json(foundTodo)
    } catch (error) {
        res.status(400).json({ msg: error.message })
    }
}
